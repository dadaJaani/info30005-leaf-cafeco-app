{"ast":null,"code":"import _objectSpread from \"/Users/waqasrehmani/work/info30005/info30005-leaf-cafeco-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar api = \"http://localhost:3001\"; // const api = \"https://cafeco-server.herokuapp.com\"\n\nvar headers = {\n  'Authorization': 'whatever i want' // 'Access-Control-Allow-Origin': 'http://localhost:3001'\n  // ============================================================================================================\n  // ============================================================================================================\n  //                                      USER FUNCTIONS\n  // ============================================================================================================\n  // ============================================================================================================\n  // FUNCTION TO CREATE USER\n\n};\nexport var createUser = function createUser(newUser) {\n  return fetch(\"\".concat(api, \"/user\"), {\n    method: 'post',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(newUser)\n  }).then(function (res) {\n    return res.json();\n  });\n};\nexport var getUser = function getUser(id) {\n  return fetch(\"\".concat(api, \"/searchUser/\").concat(id), {\n    headers: headers\n  }).then(function (res) {\n    return res.json();\n  });\n}; // FUNCTION TO EDIT USER\n\nexport var editUser = function editUser(username, edited) {\n  return fetch(\"\".concat(api, \"/user/\").concat(username), {\n    method: 'put',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(edited)\n  }).then(function (res) {\n    return res.json();\n  });\n};\nexport var editUserPoints = function editUserPoints(username, edited) {\n  return fetch(\"\".concat(api, \"/user/\").concat(username, \"/points\"), {\n    method: 'put',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(edited)\n  }).then(function (res) {\n    return res.json();\n  });\n};\nexport var editUserSavedRestaurants = function editUserSavedRestaurants(username, savedResaurants) {\n  return fetch(\"\".concat(api, \"/user/\").concat(username, \"/savedRestaurants\"), {\n    method: 'put',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(savedResaurants)\n  }).then(function (res) {\n    return res.json();\n  });\n}; // FUNCTION TO CHECK USER ID\n\nexport var checkUserID = function checkUserID(id) {\n  return fetch(\"\".concat(api, \"/user/validate/\").concat(id), {\n    headers: headers\n  }).then(function (res) {\n    return res.json();\n  });\n}; // FUNCTION TO CHECK USER EMAIL\n\nexport var checkUserEmail = function checkUserEmail(email) {\n  return fetch(\"\".concat(api, \"/user/validateemail/\").concat(email), {\n    headers: headers\n  }).then(function (res) {\n    return res.json();\n  });\n}; // FUNCTION TO VALID USER ID AND LOGIN\n\nexport var login = function login(loginDetails) {\n  return fetch(\"\".concat(api, \"/user/login/\"), {\n    method: 'post',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(loginDetails)\n  }).then(function (res) {\n    return res.json();\n  });\n}; // FUNCTION TO DELETE USER\n\nexport var deleteUser = function deleteUser(userID) {\n  return fetch(\"\".concat(api, \"/user/\").concat(userID), {\n    method: 'delete',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    })\n  }).then(function (res) {\n    return console.log(res);\n  });\n}; // ============================================================================================================\n// ============================================================================================================\n//                                      REWARD FUNCTIONS\n// ============================================================================================================\n// ============================================================================================================\n// FUNCTION TO GET ALL REWARDS\n\nexport var getRewardsByUserID = function getRewardsByUserID(username) {\n  return fetch(\"\".concat(api, \"/user/\").concat(username, \"/rewards\"), {\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    })\n  }).then(function (res) {\n    return res.json();\n  });\n};\nexport var createReward = function createReward(newReward) {\n  return fetch(\"\".concat(api, \"/reward\"), {\n    method: 'post',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(newReward)\n  }).then(function (res) {\n    return res.json();\n  });\n}; // ============================================================================================================\n// ============================================================================================================\n//                                      RESTAURANT FUNCTIONS\n// ============================================================================================================\n// ============================================================================================================\n\nexport var createRestaurant = function createRestaurant(newRestaurant) {\n  return fetch(\"\".concat(api, \"/restaurant\"), {\n    method: 'post',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(newRestaurant)\n  }).then(function (res) {\n    return res.json();\n  });\n};\nexport var getAllRestaurants = function getAllRestaurants() {\n  return fetch(\"\".concat(api, \"/findAllRestaurants\"), {\n    headers: headers\n  }).then(function (res) {\n    return res.json();\n  });\n};\nexport var getRestaurant = function getRestaurant(restaurantID) {\n  return fetch(\"\".concat(api, \"/searchRestaurant/\").concat(restaurantID), {\n    headers: headers\n  }).then(function (res) {\n    return res.json();\n  });\n};\nexport var createReview = function createReview(restaurantID, newReview) {\n  return fetch(\"\".concat(api, \"/restaurant/\").concat(restaurantID, \"/review\"), {\n    method: 'put',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(newReview)\n  }).then(function (res) {\n    return res.json();\n  });\n};\nexport var loginPartner = function loginPartner(loginDetails) {\n  return fetch(\"\".concat(api, \"/restaurant/login/\"), {\n    method: 'post',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(loginDetails)\n  }).then(function (res) {\n    return res.json();\n  });\n};\nexport var editPartner = function editPartner(id, edited) {\n  return fetch(\"\".concat(api, \"/restaurant/\").concat(id), {\n    method: 'put',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(edited)\n  }).then(function (res) {\n    return res.json();\n  });\n};","map":{"version":3,"sources":["/Users/waqasrehmani/work/info30005/info30005-leaf-cafeco-app/src/utils/api.js"],"names":["api","headers","createUser","newUser","fetch","method","body","JSON","stringify","then","res","json","getUser","id","editUser","username","edited","editUserPoints","editUserSavedRestaurants","savedResaurants","checkUserID","checkUserEmail","email","login","loginDetails","deleteUser","userID","console","log","getRewardsByUserID","createReward","newReward","createRestaurant","newRestaurant","getAllRestaurants","getRestaurant","restaurantID","createReview","newReview","loginPartner","editPartner"],"mappings":"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","sourcesContent":["\nconst api = \"http://localhost:3001\"\n// const api = \"https://cafeco-server.herokuapp.com\"\n\nconst headers = {\n    'Authorization': 'whatever i want',\n    // 'Access-Control-Allow-Origin': 'http://localhost:3001'\n}\n\n\n// ============================================================================================================\n// ============================================================================================================\n//                                      USER FUNCTIONS\n// ============================================================================================================\n// ============================================================================================================\n\n// FUNCTION TO CREATE USER\nexport const createUser = (newUser) =>\n    fetch(`${api}/user`, {\n        method: 'post',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify( newUser )\n    }).then(res => res.json())\n\n\nexport const getUser = (id) =>\n    fetch(`${api}/searchUser/${id}`, { headers })\n        .then(res => res.json())\n\n// FUNCTION TO EDIT USER\nexport const editUser = (username, edited) =>\n    fetch(`${api}/user/${username}`, {\n        method: 'put',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify( edited )\n    }).then(res => res.json())\n\nexport const editUserPoints = (username, edited) =>\n    fetch(`${api}/user/${username}/points`, {\n        method: 'put',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify( edited )\n    }).then(res => res.json())\n\nexport const editUserSavedRestaurants = (username, savedResaurants) =>\n    fetch(`${api}/user/${username}/savedRestaurants`, {\n        method: 'put',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify( savedResaurants )\n    }).then(res => res.json())\n\n\n// FUNCTION TO CHECK USER ID\nexport const checkUserID = (id) =>\n    fetch(`${api}/user/validate/${id}`, { headers })\n        .then(res => res.json())\n\n// FUNCTION TO CHECK USER EMAIL\nexport const checkUserEmail = (email) =>\n    fetch(`${api}/user/validateemail/${email}`, { headers })\n        .then(res => res.json())\n\n// FUNCTION TO VALID USER ID AND LOGIN\nexport const login = (loginDetails) =>\n    fetch(`${api}/user/login/`, {\n        method: 'post',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify( loginDetails )\n    }).then(res => res.json())\n\n\n// FUNCTION TO DELETE USER\nexport const deleteUser = (userID) =>\n    fetch(`${api}/user/${userID}`, {\n        method: 'delete',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n    }).then( res => console.log(res))\n\n\n\n// ============================================================================================================\n// ============================================================================================================\n//                                      REWARD FUNCTIONS\n// ============================================================================================================\n// ============================================================================================================\n\n\n// FUNCTION TO GET ALL REWARDS\nexport const getRewardsByUserID = (username) =>\n    fetch(`${api}/user/${username}/rewards`, {\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n    }).then( res => res.json())\n\n\n\nexport const createReward = (newReward) =>\n    fetch(`${api}/reward`, {\n        method: 'post',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify( newReward )\n    }).then(res => res.json())\n\n\n\n\n\n// ============================================================================================================\n// ============================================================================================================\n//                                      RESTAURANT FUNCTIONS\n// ============================================================================================================\n// ============================================================================================================\n\nexport const createRestaurant = (newRestaurant) =>\n    fetch(`${api}/restaurant`, {\n        method: 'post',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify( newRestaurant )\n    }).then(res => res.json())\n\n\nexport const getAllRestaurants = () =>\n    fetch(`${api}/findAllRestaurants`, { headers })\n        .then(res => res.json())\n\nexport const getRestaurant = (restaurantID) =>\n    fetch(`${api}/searchRestaurant/${restaurantID}`, { headers })\n        .then(res => res.json())\n\nexport const createReview = (restaurantID, newReview) =>\n    fetch(`${api}/restaurant/${restaurantID}/review`, {\n        method: 'put',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify( newReview )\n    }).then(res => res.json())\n\n\nexport const loginPartner = (loginDetails) =>\n    fetch(`${api}/restaurant/login/`, {\n        method: 'post',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify( loginDetails )\n    }).then(res => res.json())\n\n\n\nexport const editPartner = (id, edited) =>\n    fetch(`${api}/restaurant/${id}`, {\n        method: 'put',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify( edited )\n    }).then(res => res.json())\n"]},"metadata":{},"sourceType":"module"}