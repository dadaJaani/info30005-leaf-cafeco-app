{"ast":null,"code":"import _objectSpread from \"/Users/waqasrehmani/work/info30005/info30005-leaf-cafeco/client-user/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar api = \"http://localhost:3001\"; // Generate a unique token for storing your data on the backend server.\n// let token = localStorage.token\n// if (!token)\n//     token = localStorage.token = Math.random().toString(36).substr(-8)\n\nvar headers = {\n  'Authorization': 'whatever i want' // 'Access-Control-Allow-Origin': 'http://localhost:3001'\n  // http://localhost:3001/user/5123cas\n  // FUNCTION TO CREATE USER\n\n};\nexport var createUser = function createUser(newUser) {\n  return fetch(\"\".concat(api, \"/user\"), {\n    method: 'post',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(newUser)\n  }).then(function (res) {\n    return res.json();\n  });\n}; // FUNCTION TO EDIT USER\n\nexport var editUser = function editUser(userID, edited) {\n  return fetch(\"\".concat(api, \"/user/\").concat(userID), {\n    method: 'put',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(edited)\n  }).then(function (res) {\n    return res.json();\n  });\n}; // FUNCTION TO CHECK USER ID\n\nexport var checkUserID = function checkUserID(id) {\n  return fetch(\"\".concat(api, \"/user/checkID/\").concat(id), {\n    headers: headers\n  }).then(function (res) {\n    return res.json();\n  });\n}; // FUNCTION TO VALID USER ID AND LOGIN\n\nexport var login = function login(loginDetails) {\n  return fetch(\"\".concat(api, \"/user/login/\").concat(loginDetails.username), {\n    method: 'post',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(loginDetails)\n  }).then(function (res) {\n    return res.json();\n  });\n}; // FUNCTION TO DELETE USER\n\nexport var deleteUser = function deleteUser(userID) {\n  return fetch(\"\".concat(api, \"/user/\").concat(userID), {\n    method: 'delete',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    })\n  }).then(function (res) {\n    return console.log(res);\n  });\n}; // FUNCTION TO GET ALL REWARDS\n\nexport var getRewardsByUserID = function getRewardsByUserID(userID) {\n  return fetch(\"\".concat(api, \"/rewards/\").concat(userID), {\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    })\n  }).then(function (res) {\n    return res.json();\n  });\n}; // export const getCategories = () =>\n//     fetch(`${api}/categories`, { headers })\n//         .then(res => res.json())\n//         .then(data => data.categories)\n//\n// export const getPostsFromCategory = (category) =>\n//     fetch(`${api}/${category}/posts`, { headers })\n//         .then(res => res.json())\n//\n// export const getAllPosts = () =>\n//     fetch(`${api}/posts`, { headers })\n//         .then(res => res.json())\n// // .then(data => data.posts)\n//\n// export const addPost = (newPost) =>\n//     fetch(`${api}/posts`, {\n//         method: 'post',\n//         headers: {\n//             ...headers,\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify( newPost )\n//     }).then(res => res.json())\n//\n// export const getPost = (postId) =>\n//     fetch(`${api}/posts/${postId}`, { headers })\n//         .then(res => res.json())\n//\n// // voteString must have { option: \"upVote\" or \"downVote\"}\n// export const votePost = (postId, voteString) =>\n//     fetch(`${api}/posts/${postId}`, {\n//         method: 'post',\n//         headers: {\n//             ...headers,\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify( voteString )\n//     }).then(res => res.json())\n//\n// export const editPost = (postId, edited) =>\n//     fetch(`${api}/posts/${postId}`, {\n//         method: 'PUT',\n//         headers: {\n//             ...headers,\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify(edited)\n//     }).then(res => res.json())\n//\n// export const deletePost = (postId) =>\n//     fetch(`${api}/posts/${postId}`, {\n//         method: 'delete',\n//         headers: {\n//             ...headers\n//         }\n//     }).then(res => res.json())\n//\n//\n// // ==========================================================================\n// //   THIS IS THE SECTion FOR COMMENTS\n// // ==========================================================================\n//\n// export const getAllComments = (postId) =>\n//     fetch(`${api}/posts/${postId}/comments`, { headers })\n//         .then(res => res.json())\n//\n//\n// export const addComment = (newComment) =>\n//     fetch(`${api}/comments`, {\n//         method: 'post',\n//         headers: {\n//             ...headers,\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify( newComment )\n//     }).then(res => res.json())\n//\n//\n// export const getComment = (commentId) =>\n//     fetch(`${api}/comments/${commentId}`, { headers })\n//         .then(res => res.json())\n//\n// // voteString must have { option: \"upVote\" or \"downVote\"}\n// export const voteComment = (commentId, voteString) =>\n//     fetch(`${api}/comments/${commentId}`, {\n//         method: 'post',\n//         headers: {\n//             ...headers,\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify( voteString )\n//     }).then(res => res.json())\n//\n// // The edited Object has the timestamp and body.\n// export const editComment = (commentId, edited) =>\n//     fetch(`${api}/comments/${commentId}`, {\n//         method: 'put',\n//         headers: {\n//             ...headers,\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify( edited )\n//     }).then(res => res.json())\n//\n//\n// export const deleteComment = (commentId) =>\n//     fetch(`${api}/comments/${commentId}`, {\n//         method: 'delete',\n//         headers: {\n//             ...headers\n//         }\n//     }).then(res => res.json())","map":{"version":3,"sources":["/Users/waqasrehmani/work/info30005/info30005-leaf-cafeco/client-user/src/utils/api.js"],"names":["api","headers","createUser","newUser","fetch","method","body","JSON","stringify","then","res","json","editUser","userID","edited","checkUserID","id","login","loginDetails","username","deleteUser","console","log","getRewardsByUserID"],"mappings":"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","sourcesContent":["\nconst api = \"http://localhost:3001\"\n\n\n// Generate a unique token for storing your data on the backend server.\n\n// let token = localStorage.token\n// if (!token)\n//     token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n    'Authorization': 'whatever i want',\n    // 'Access-Control-Allow-Origin': 'http://localhost:3001'\n}\n\n\n// http://localhost:3001/user/5123cas\n\n\n\n// FUNCTION TO CREATE USER\nexport const createUser = (newUser) =>\n    fetch(`${api}/user`, {\n        method: 'post',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify( newUser )\n    }).then(res => res.json())\n\n\n// FUNCTION TO EDIT USER\nexport const editUser = (userID, edited) =>\n    fetch(`${api}/user/${userID}`, {\n        method: 'put',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify( edited )\n    }).then(res => res.json())\n\n\n// FUNCTION TO CHECK USER ID\nexport const checkUserID = (id) =>\n    fetch(`${api}/user/checkID/${id}`, { headers })\n        .then(res => res.json())\n\n// FUNCTION TO VALID USER ID AND LOGIN\nexport const login = (loginDetails) =>\n    fetch(`${api}/user/login/${loginDetails.username}`, {\n        method: 'post',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify( loginDetails )\n    }).then(res => res.json())\n\n\n// FUNCTION TO DELETE USER\nexport const deleteUser = (userID) =>\n    fetch(`${api}/user/${userID}`, {\n        method: 'delete',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n    }).then( res => console.log(res))\n\n\n\n\n// FUNCTION TO GET ALL REWARDS\nexport const getRewardsByUserID = (userID) =>\n    fetch(`${api}/rewards/${userID}`, {\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n    }).then( res => res.json())\n\n// export const getCategories = () =>\n//     fetch(`${api}/categories`, { headers })\n//         .then(res => res.json())\n//         .then(data => data.categories)\n//\n// export const getPostsFromCategory = (category) =>\n//     fetch(`${api}/${category}/posts`, { headers })\n//         .then(res => res.json())\n//\n// export const getAllPosts = () =>\n//     fetch(`${api}/posts`, { headers })\n//         .then(res => res.json())\n// // .then(data => data.posts)\n//\n// export const addPost = (newPost) =>\n//     fetch(`${api}/posts`, {\n//         method: 'post',\n//         headers: {\n//             ...headers,\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify( newPost )\n//     }).then(res => res.json())\n//\n// export const getPost = (postId) =>\n//     fetch(`${api}/posts/${postId}`, { headers })\n//         .then(res => res.json())\n//\n// // voteString must have { option: \"upVote\" or \"downVote\"}\n// export const votePost = (postId, voteString) =>\n//     fetch(`${api}/posts/${postId}`, {\n//         method: 'post',\n//         headers: {\n//             ...headers,\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify( voteString )\n//     }).then(res => res.json())\n//\n// export const editPost = (postId, edited) =>\n//     fetch(`${api}/posts/${postId}`, {\n//         method: 'PUT',\n//         headers: {\n//             ...headers,\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify(edited)\n//     }).then(res => res.json())\n//\n// export const deletePost = (postId) =>\n//     fetch(`${api}/posts/${postId}`, {\n//         method: 'delete',\n//         headers: {\n//             ...headers\n//         }\n//     }).then(res => res.json())\n//\n//\n// // ==========================================================================\n// //   THIS IS THE SECTion FOR COMMENTS\n// // ==========================================================================\n//\n// export const getAllComments = (postId) =>\n//     fetch(`${api}/posts/${postId}/comments`, { headers })\n//         .then(res => res.json())\n//\n//\n// export const addComment = (newComment) =>\n//     fetch(`${api}/comments`, {\n//         method: 'post',\n//         headers: {\n//             ...headers,\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify( newComment )\n//     }).then(res => res.json())\n//\n//\n// export const getComment = (commentId) =>\n//     fetch(`${api}/comments/${commentId}`, { headers })\n//         .then(res => res.json())\n//\n// // voteString must have { option: \"upVote\" or \"downVote\"}\n// export const voteComment = (commentId, voteString) =>\n//     fetch(`${api}/comments/${commentId}`, {\n//         method: 'post',\n//         headers: {\n//             ...headers,\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify( voteString )\n//     }).then(res => res.json())\n//\n// // The edited Object has the timestamp and body.\n// export const editComment = (commentId, edited) =>\n//     fetch(`${api}/comments/${commentId}`, {\n//         method: 'put',\n//         headers: {\n//             ...headers,\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify( edited )\n//     }).then(res => res.json())\n//\n//\n// export const deleteComment = (commentId) =>\n//     fetch(`${api}/comments/${commentId}`, {\n//         method: 'delete',\n//         headers: {\n//             ...headers\n//         }\n//     }).then(res => res.json())\n"]},"metadata":{},"sourceType":"module"}