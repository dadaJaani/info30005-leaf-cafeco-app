{"ast":null,"code":"import _objectSpread from \"/Users/waqasrehmani/work/info30005/info30005-leaf-cafeco-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar api = \"http://localhost:3001\"; // const api = \"https://cafeco-server.herokuapp.com\"\n\nvar headers = {\n  'Authorization': 'whatever i want' // 'Access-Control-Allow-Origin': 'http://localhost:3001'\n  // ============================================================================================================\n  // ============================================================================================================\n  //                                      USER FUNCTIONS\n  // ============================================================================================================\n  // ============================================================================================================\n  // FUNCTION TO CREATE USER\n\n};\nexport var createUser = function createUser(newUser) {\n  return fetch(\"\".concat(api, \"/user\"), {\n    method: 'post',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(newUser)\n  }).then(function (res) {\n    return res.json();\n  });\n};\nexport var getUser = function getUser(id) {\n  return fetch(\"\".concat(api, \"/searchUser/\").concat(id), {\n    headers: headers\n  }).then(function (res) {\n    return res.json();\n  });\n}; // FUNCTION TO EDIT USER\n\nexport var editUser = function editUser(username, edited) {\n  return fetch(\"\".concat(api, \"/user/\").concat(username), {\n    method: 'put',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(edited)\n  }).then(function (res) {\n    return res.json();\n  });\n}; // FUNCTION TO CHECK USER ID\n\nexport var checkUserID = function checkUserID(id) {\n  return fetch(\"\".concat(api, \"/user/validate/\").concat(id), {\n    headers: headers\n  }).then(function (res) {\n    return res.json();\n  });\n}; // FUNCTION TO CHECK USER EMAIL\n\nexport var checkUserEmail = function checkUserEmail(email) {\n  return fetch(\"\".concat(api, \"/user/validateemail/\").concat(email), {\n    headers: headers\n  }).then(function (res) {\n    return res.json();\n  });\n}; // FUNCTION TO VALID USER ID AND LOGIN\n\nexport var login = function login(loginDetails) {\n  return fetch(\"\".concat(api, \"/user/login/\"), {\n    method: 'post',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(loginDetails)\n  }).then(function (res) {\n    return res.json();\n  });\n}; // FUNCTION TO DELETE USER\n\nexport var deleteUser = function deleteUser(userID) {\n  return fetch(\"\".concat(api, \"/user/\").concat(userID), {\n    method: 'delete',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    })\n  }).then(function (res) {\n    return console.log(res);\n  });\n}; // ============================================================================================================\n// ============================================================================================================\n//                                      REWARD FUNCTIONS\n// ============================================================================================================\n// ============================================================================================================\n// FUNCTION TO GET ALL REWARDS\n\nexport var getRewardsByUserID = function getRewardsByUserID(username) {\n  return fetch(\"\".concat(api, \"/user/\").concat(username, \"/rewards\"), {\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    })\n  }).then(function (res) {\n    return res.json();\n  });\n};\nexport var createReward = function createReward(newReward) {\n  return fetch(\"\".concat(api, \"/restaurant/\").concat(restaurantID, \"/review\"), {\n    method: 'put',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(newReward)\n  }).then(function (res) {\n    return res.json();\n  });\n}; // ============================================================================================================\n// ============================================================================================================\n//                                      RESTAURANT FUNCTIONS\n// ============================================================================================================\n// ============================================================================================================\n// let newRestaurant = {\n//     id: \"thevegiebar\",\n//     password: \"123\",\n//     email: \"thevegiebars@gmail.com\",\n//     name: \"The Vegie Bar\",\n//     address: \"380 Brunswick St, Fitzroy, VIC 3065\",\n//     description: \"Inventive veggie and vegan meals, raw food and cocktails in a lively space with a leafy courtyard.\",\n//     foodReviews:[],\n//     sustainabilityReviews:[],\n//     averageFoodRating: 0,\n//     location: {\n//         lat: -37.795840,\n//         lng: 144.979121,\n//     },\n//     website: \"vegiebar.com.au\",\n//     phone: \"(03) 9417 6935\",\n//     averageSustainabilityRating: 0,\n//     typeOfRewards: [\"RewFD\", \"Rew10\", \"Rew20\",Â \"Rew50\" ],\n//     photos: \"https://www.goodfood.com.au/content/dam/images/h/1/9/6/w/t/image.related.wideLandscape.940x529.h198ct.png/1545090534636.jpg\",\n// }\n\nexport var createRestaurant = function createRestaurant(newRestaurant) {\n  return fetch(\"\".concat(api, \"/restaurant\"), {\n    method: 'post',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(newRestaurant)\n  }).then(function (res) {\n    return res.json();\n  });\n};\nexport var getAllRestaurants = function getAllRestaurants() {\n  return fetch(\"\".concat(api, \"/findAllRestaurants\"), {\n    headers: headers\n  }).then(function (res) {\n    return res.json();\n  });\n};\nexport var getRestaurant = function getRestaurant(restaurantID) {\n  return fetch(\"\".concat(api, \"/searchRestaurant/\").concat(restaurantID), {\n    headers: headers\n  }).then(function (res) {\n    return res.json();\n  });\n};\nexport var createReview = function createReview(restaurantID, newReview) {\n  return fetch(\"\".concat(api, \"/restaurant/\").concat(restaurantID, \"/review\"), {\n    method: 'put',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(newReview)\n  }).then(function (res) {\n    return res.json();\n  });\n}; // export const getCategories = () =>\n//     fetch(`${api}/categories`, { headers })\n//         .then(res => res.json())\n//         .then(data => data.categories)\n//\n// export const getPostsFromCategory = (category) =>\n//     fetch(`${api}/${category}/posts`, { headers })\n//         .then(res => res.json())\n//\n// export const getAllPosts = () =>\n//     fetch(`${api}/posts`, { headers })\n//         .then(res => res.json())\n// // .then(data => data.posts)\n//\n// export const addPost = (newPost) =>\n//     fetch(`${api}/posts`, {\n//         method: 'post',\n//         headers: {\n//             ...headers,\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify( newPost )\n//     }).then(res => res.json())\n//\n// export const getPost = (postId) =>\n//     fetch(`${api}/posts/${postId}`, { headers })\n//         .then(res => res.json())\n//\n// // voteString must have { option: \"upVote\" or \"downVote\"}\n// export const votePost = (postId, voteString) =>\n//     fetch(`${api}/posts/${postId}`, {\n//         method: 'post',\n//         headers: {\n//             ...headers,\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify( voteString )\n//     }).then(res => res.json())\n//\n// export const editPost = (postId, edited) =>\n//     fetch(`${api}/posts/${postId}`, {\n//         method: 'PUT',\n//         headers: {\n//             ...headers,\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify(edited)\n//     }).then(res => res.json())\n//\n// export const deletePost = (postId) =>\n//     fetch(`${api}/posts/${postId}`, {\n//         method: 'delete',\n//         headers: {\n//             ...headers\n//         }\n//     }).then(res => res.json())\n//\n//\n// // ==========================================================================\n// //   THIS IS THE SECTion FOR COMMENTS\n// // ==========================================================================\n//\n// export const getAllComments = (postId) =>\n//     fetch(`${api}/posts/${postId}/comments`, { headers })\n//         .then(res => res.json())\n//\n//\n// export const addComment = (newComment) =>\n//     fetch(`${api}/comments`, {\n//         method: 'post',\n//         headers: {\n//             ...headers,\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify( newComment )\n//     }).then(res => res.json())\n//\n//\n// export const getComment = (commentId) =>\n//     fetch(`${api}/comments/${commentId}`, { headers })\n//         .then(res => res.json())\n//\n// // voteString must have { option: \"upVote\" or \"downVote\"}\n// export const voteComment = (commentId, voteString) =>\n//     fetch(`${api}/comments/${commentId}`, {\n//         method: 'post',\n//         headers: {\n//             ...headers,\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify( voteString )\n//     }).then(res => res.json())\n//\n// // The edited Object has the timestamp and body.\n// export const editComment = (commentId, edited) =>\n//     fetch(`${api}/comments/${commentId}`, {\n//         method: 'put',\n//         headers: {\n//             ...headers,\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify( edited )\n//     }).then(res => res.json())\n//\n//\n// export const deleteComment = (commentId) =>\n//     fetch(`${api}/comments/${commentId}`, {\n//         method: 'delete',\n//         headers: {\n//             ...headers\n//         }\n//     }).then(res => res.json())","map":{"version":3,"sources":["/Users/waqasrehmani/work/info30005/info30005-leaf-cafeco-app/src/utils/api.js"],"names":["api","headers","createUser","newUser","fetch","method","body","JSON","stringify","then","res","json","getUser","id","editUser","username","edited","checkUserID","checkUserEmail","email","login","loginDetails","deleteUser","userID","console","log","getRewardsByUserID","createReward","newReward","restaurantID","createRestaurant","newRestaurant","getAllRestaurants","getRestaurant","createReview","newReview"],"mappings":";AACA,IAAMA,GAAG,GAAG,uBAAZ,C,CACA;;AAEA,IAAMC,OAAO,GAAG;AACZ,mBAAiB,iBADL,CAEZ;AAIJ;AACA;AACA;AACA;AACA;AAEA;;AAZgB,CAAhB;AAaA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,OAAD;AAAA,SACtBC,KAAK,WAAIJ,GAAJ,YAAgB;AACjBK,IAAAA,MAAM,EAAE,MADS;AAEjBJ,IAAAA,OAAO,oBACAA,OADA;AAEH,sBAAgB;AAFb,MAFU;AAMjBK,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAgBL,OAAhB;AANW,GAAhB,CAAL,CAOGM,IAPH,CAOQ,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GAPX,CADsB;AAAA,CAAnB;AAWP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,EAAD;AAAA,SACnBT,KAAK,WAAIJ,GAAJ,yBAAsBa,EAAtB,GAA4B;AAAEZ,IAAAA,OAAO,EAAPA;AAAF,GAA5B,CAAL,CACKQ,IADL,CACU,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GADb,CADmB;AAAA,CAAhB,C,CAIP;;AACA,OAAO,IAAMG,QAAQ,GAAG,SAAXA,QAAW,CAACC,QAAD,EAAWC,MAAX;AAAA,SACpBZ,KAAK,WAAIJ,GAAJ,mBAAgBe,QAAhB,GAA4B;AAC7BV,IAAAA,MAAM,EAAE,KADqB;AAE7BJ,IAAAA,OAAO,oBACAA,OADA;AAEH,sBAAgB;AAFb,MAFsB;AAM7BK,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAgBQ,MAAhB;AANuB,GAA5B,CAAL,CAOGP,IAPH,CAOQ,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GAPX,CADoB;AAAA,CAAjB,C,CAWP;;AACA,OAAO,IAAMM,WAAW,GAAG,SAAdA,WAAc,CAACJ,EAAD;AAAA,SACvBT,KAAK,WAAIJ,GAAJ,4BAAyBa,EAAzB,GAA+B;AAAEZ,IAAAA,OAAO,EAAPA;AAAF,GAA/B,CAAL,CACKQ,IADL,CACU,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GADb,CADuB;AAAA,CAApB,C,CAIP;;AACA,OAAO,IAAMO,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD;AAAA,SAC1Bf,KAAK,WAAIJ,GAAJ,iCAA8BmB,KAA9B,GAAuC;AAAElB,IAAAA,OAAO,EAAPA;AAAF,GAAvC,CAAL,CACKQ,IADL,CACU,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GADb,CAD0B;AAAA,CAAvB,C,CAIP;;AACA,OAAO,IAAMS,KAAK,GAAG,SAARA,KAAQ,CAACC,YAAD;AAAA,SACjBjB,KAAK,WAAIJ,GAAJ,mBAAuB;AACxBK,IAAAA,MAAM,EAAE,MADgB;AAExBJ,IAAAA,OAAO,oBACAA,OADA;AAEH,sBAAgB;AAFb,MAFiB;AAMxBK,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAgBa,YAAhB;AANkB,GAAvB,CAAL,CAOGZ,IAPH,CAOQ,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GAPX,CADiB;AAAA,CAAd,C,CAWP;;AACA,OAAO,IAAMW,UAAU,GAAG,SAAbA,UAAa,CAACC,MAAD;AAAA,SACtBnB,KAAK,WAAIJ,GAAJ,mBAAgBuB,MAAhB,GAA0B;AAC3BlB,IAAAA,MAAM,EAAE,QADmB;AAE3BJ,IAAAA,OAAO,oBACAA,OADA;AAEH,sBAAgB;AAFb;AAFoB,GAA1B,CAAL,CAMGQ,IANH,CAMS,UAAAC,GAAG;AAAA,WAAIc,OAAO,CAACC,GAAR,CAAYf,GAAZ,CAAJ;AAAA,GANZ,CADsB;AAAA,CAAnB,C,CAWP;AACA;AACA;AACA;AACA;AAGA;;AACA,OAAO,IAAMgB,kBAAkB,GAAG,SAArBA,kBAAqB,CAACX,QAAD;AAAA,SAC9BX,KAAK,WAAIJ,GAAJ,mBAAgBe,QAAhB,eAAoC;AACrCd,IAAAA,OAAO,oBACAA,OADA;AAEH,sBAAgB;AAFb;AAD8B,GAApC,CAAL,CAKGQ,IALH,CAKS,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GALZ,CAD8B;AAAA,CAA3B;AAUP,OAAO,IAAMgB,YAAY,GAAG,SAAfA,YAAe,CAACC,SAAD;AAAA,SACxBxB,KAAK,WAAIJ,GAAJ,yBAAsB6B,YAAtB,cAA6C;AAC9CxB,IAAAA,MAAM,EAAE,KADsC;AAE9CJ,IAAAA,OAAO,oBACAA,OADA;AAEH,sBAAgB;AAFb,MAFuC;AAM9CK,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAgBoB,SAAhB;AANwC,GAA7C,CAAL,CAOGnB,IAPH,CAOQ,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GAPX,CADwB;AAAA,CAArB,C,CAcP;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMmB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,aAAD;AAAA,SAC5B3B,KAAK,WAAIJ,GAAJ,kBAAsB;AACvBK,IAAAA,MAAM,EAAE,MADe;AAEvBJ,IAAAA,OAAO,oBACAA,OADA;AAEH,sBAAgB;AAFb,MAFgB;AAMvBK,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAgBuB,aAAhB;AANiB,GAAtB,CAAL,CAOGtB,IAPH,CAOQ,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GAPX,CAD4B;AAAA,CAAzB;AAWP,OAAO,IAAMqB,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,SAC7B5B,KAAK,WAAIJ,GAAJ,0BAA8B;AAAEC,IAAAA,OAAO,EAAPA;AAAF,GAA9B,CAAL,CACKQ,IADL,CACU,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GADb,CAD6B;AAAA,CAA1B;AAIP,OAAO,IAAMsB,aAAa,GAAG,SAAhBA,aAAgB,CAACJ,YAAD;AAAA,SACzBzB,KAAK,WAAIJ,GAAJ,+BAA4B6B,YAA5B,GAA4C;AAAE5B,IAAAA,OAAO,EAAPA;AAAF,GAA5C,CAAL,CACKQ,IADL,CACU,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GADb,CADyB;AAAA,CAAtB;AAIP,OAAO,IAAMuB,YAAY,GAAG,SAAfA,YAAe,CAACL,YAAD,EAAeM,SAAf;AAAA,SACxB/B,KAAK,WAAIJ,GAAJ,yBAAsB6B,YAAtB,cAA6C;AAC9CxB,IAAAA,MAAM,EAAE,KADsC;AAE9CJ,IAAAA,OAAO,oBACAA,OADA;AAEH,sBAAgB;AAFb,MAFuC;AAM9CK,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAgB2B,SAAhB;AANwC,GAA7C,CAAL,CAOG1B,IAPH,CAOQ,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GAPX,CADwB;AAAA,CAArsourcesContent":["\nconst api = \"http://localhost:3001\"\n// const api = \"https://cafeco-server.herokuapp.com\"\n\nconst headers = {\n    'Authorization': 'whatever i want',\n    // 'Access-Control-Allow-Origin': 'http://localhost:3001'\n}\n\n\n// ============================================================================================================\n// ============================================================================================================\n//                                      USER FUNCTIONS\n// ============================================================================================================\n// ============================================================================================================\n\n// FUNCTION TO CREATE USER\nexport const createUser = (newUser) =>\n    fetch(`${api}/user`, {\n        method: 'post',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify( newUser )\n    }).then(res => res.json())\n\n\nexport const getUser = (id) =>\n    fetch(`${api}/searchUser/${id}`, { headers })\n        .then(res => res.json())\n\n// FUNCTION TO EDIT USER\nexport const editUser = (username, edited) =>\n    fetch(`${api}/user/${username}`, {\n        method: 'put',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify( edited )\n    }).then(res => res.json())\n\n\n// FUNCTION TO CHECK USER ID\nexport const checkUserID = (id) =>\n    fetch(`${api}/user/validate/${id}`, { headers })\n        .then(res => res.json())\n\n// FUNCTION TO CHECK USER EMAIL\nexport const checkUserEmail = (email) =>\n    fetch(`${api}/user/validateemail/${email}`, { headers })\n        .then(res => res.json())\n\n// FUNCTION TO VALID USER ID AND LOGIN\nexport const login = (loginDetails) =>\n    fetch(`${api}/user/login/`, {\n        method: 'post',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify( loginDetails )\n    }).then(res => res.json())\n\n\n// FUNCTION TO DELETE USER\nexport const deleteUser = (userID) =>\n    fetch(`${api}/user/${userID}`, {\n        method: 'delete',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n    }).then( res => console.log(res))\n\n\n\n// ============================================================================================================\n// ============================================================================================================\n//                                      REWARD FUNCTIONS\n// ============================================================================================================\n// ============================================================================================================\n\n\n// FUNCTION TO GET ALL REWARDS\nexport const getRewardsByUserID = (username) =>\n    fetch(`${api}/user/${username}/rewards`, {\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n    }).then( res => res.json())\n\n\n\nexport const createReward = (newReward) =>\n    fetch(`${api}/restaurant/${restaurantID}/review`, {\n        method: 'put',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify( newReward )\n    }).then(res => res.json())\n\n\n\n\n\n// ============================================================================================================\n// ============================================================================================================\n//                                      RESTAURANT FUNCTIONS\n// ============================================================================================================\n// ============================================================================================================\n\n// let newRestaurant = {\n//     id: \"thevegiebar\",\n//     password: \"123\",\n//     email: \"thevegiebars@gmail.com\",\n//     name: \"The Vegie Bar\",\n//     address: \"380 Brunswick St, Fitzroy, VIC 3065\",\n//     description: \"Inventive veggie and vegan meals, raw food and cocktails in a lively space with a leafy courtyard.\",\n//     foodReviews:[],\n//     sustainabilityReviews:[],\n//     averageFoodRating: 0,\n//     location: {\n//         lat: -37.795840,\n//         lng: 144.979121,\n//     },\n//     website: \"vegiebar.com.au\",\n//     phone: \"(03) 9417 6935\",\n//     averageSustainabilityRating: 0,\n//     typeOfRewards: [\"RewFD\", \"Rew10\", \"Rew20\",Â \"Rew50\" ],\n//     photos: \"https://www.goodfood.com.au/content/dam/images/h/1/9/6/w/t/image.related.wideLandscape.940x529.h198ct.png/1545090534636.jpg\",\n// }\n\nexport const createRestaurant = (newRestaurant) =>\n    fetch(`${api}/restaurant`, {\n        method: 'post',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify( newRestaurant )\n    }).then(res => res.json())\n\n\nexport const getAllRestaurants = () =>\n    fetch(`${api}/findAllRestaurants`, { headers })\n        .then(res => res.json())\n\nexport const getRestaurant = (restaurantID) =>\n    fetch(`${api}/searchRestaurant/${restaurantID}`, { headers })\n        .then(res => res.json())\n\nexport const createReview = (restaurantID, newReview) =>\n    fetch(`${api}/restaurant/${restaurantID}/review`, {\n        method: 'put',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify( newReview )\n    }).then(res => res.json())\n\n// export const getCategories = () =>\n//     fetch(`${api}/categories`, { headers })\n//         .then(res => res.json())\n//         .then(data => data.categories)\n//\n// export const getPostsFromCategory = (category) =>\n//     fetch(`${api}/${category}/posts`, { headers })\n//         .then(res => res.json())\n//\n// export const getAllPosts = () =>\n//     fetch(`${api}/posts`, { headers })\n//         .then(res => res.json())\n// // .then(data => data.posts)\n//\n// export const addPost = (newPost) =>\n//     fetch(`${api}/posts`, {\n//         method: 'post',\n//         headers: {\n//             ...headers,\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify( newPost )\n//     }).then(res => res.json())\n//\n// export const getPost = (postId) =>\n//     fetch(`${api}/posts/${postId}`, { headers })\n//         .then(res => res.json())\n//\n// // voteString must have { option: \"upVote\" or \"downVote\"}\n// export const votePost = (postId, voteString) =>\n//     fetch(`${api}/posts/${postId}`, {\n//         method: 'post',\n//         headers: {\n//             ...headers,\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify( voteString )\n//     }).then(res => res.json())\n//\n// export const editPost = (postId, edited) =>\n//     fetch(`${api}/posts/${postId}`, {\n//         method: 'PUT',\n//         headers: {\n//             ...headers,\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify(edited)\n//     }).then(res => res.json())\n//\n// export const deletePost = (postId) =>\n//     fetch(`${api}/posts/${postId}`, {\n//         method: 'delete',\n//         headers: {\n//             ...headers\n//         }\n//     }).then(res => res.json())\n//\n//\n// // ==========================================================================\n// //   THIS IS THE SECTion FOR COMMENTS\n// // ==========================================================================\n//\n// export const getAllComments = (postId) =>\n//     fetch(`${api}/posts/${postId}/comments`, { headers })\n//         .then(res => res.json())\n//\n//\n// export const addComment = (newComment) =>\n//     fetch(`${api}/comments`, {\n//         method: 'post',\n//         headers: {\n//             ...headers,\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify( newComment )\n//     }).then(res => res.json())\n//\n//\n// export const getComment = (commentId) =>\n//     fetch(`${api}/comments/${commentId}`, { headers })\n//         .then(res => res.json())\n//\n// // voteString must have { option: \"upVote\" or \"downVote\"}\n// export const voteComment = (commentId, voteString) =>\n//     fetch(`${api}/comments/${commentId}`, {\n//         method: 'post',\n//         headers: {\n//             ...headers,\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify( voteString )\n//     }).then(res => res.json())\n//\n// // The edited Object has the timestamp and body.\n// export const editComment = (commentId, edited) =>\n//     fetch(`${api}/comments/${commentId}`, {\n//         method: 'put',\n//         headers: {\n//             ...headers,\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify( edited )\n//     }).then(res => res.json())\n//\n//\n// export const deleteComment = (commentId) =>\n//     fetch(`${api}/comments/${commentId}`, {\n//         method: 'delete',\n//         headers: {\n//             ...headers\n//         }\n//     }).then(res => res.json())\n"]},"metadata":{},"sourceType":"module"}